/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/candidato/cadastroCandidato.ts":
/*!********************************************!*\
  !*** ./src/candidato/cadastroCandidato.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst candidato_1 = __importDefault(__webpack_require__(/*! ./candidato */ \"./src/candidato/candidato.ts\"));\ndocument.addEventListener('DOMContentLoaded', () => {\n    let nomeCandidato = document.getElementById('nome');\n    let emailCandidato = document.getElementById('email');\n    let cpfCandidato = document.getElementById('cpf');\n    let cepCandidato = document.getElementById('cep');\n    let estadoCandidato = document.getElementById('estado');\n    let descricaoCandidato = document.getElementById('descricao');\n    let botaoSalvaCandidato = document.getElementById('button-adicionar');\n    let linguagensSelecionadas = [];\n    function armazenarLinguagens() {\n        let checkboxes = document.getElementsByName('linguagem');\n        for (let i = 0; i < checkboxes.length; i++) {\n            // verificar se o elemento é um input do tipo \"checkbox\"\n            if (checkboxes[i].type === 'checkbox' && checkboxes[i].checked) {\n                linguagensSelecionadas.push(checkboxes[i].value);\n            }\n        }\n        console.log(linguagensSelecionadas);\n        return false;\n    }\n    //Evento\n    botaoSalvaCandidato.addEventListener(\"click\", () => {\n        armazenarLinguagens();\n        let newCandidato = new candidato_1.default();\n        const regexNome = /^[a-zA-Z \\.]+$/;\n        if (regexNome.test(nomeCandidato.value.trim())) {\n            newCandidato.nome = nomeCandidato.value;\n        }\n        else {\n            alert('O campo nome só pode receber letras e pontos.');\n            return;\n        }\n        const regexEmail = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n        if (regexEmail.test(emailCandidato.value)) {\n            newCandidato.email = emailCandidato.value;\n        }\n        else {\n            alert('O campo email deve conter um email válido.');\n            return;\n        }\n        const regexCpf = /^\\d{11}$/;\n        const cpf = parseInt(cpfCandidato.value, 10);\n        if (regexCpf.test(cpf.toString())) {\n            newCandidato.cpfCandidato = cpf;\n        }\n        else {\n            alert('O campo cpf deve conter 11 números.');\n            return;\n        }\n        const regexCEP = /^\\d{8}$/;\n        const cep = parseInt(cepCandidato.value, 10);\n        if (regexCEP.test(cep.toString())) {\n            newCandidato.cep = cep;\n        }\n        else {\n            alert('O campo cep deve conter 8 números.');\n            return;\n        }\n        if (estadoCandidato.value.trim() !== \"\" && descricaoCandidato.value.trim() !== \"\") {\n            newCandidato.estado = estadoCandidato.value;\n            newCandidato.descricao = descricaoCandidato.value;\n        }\n        else {\n            alert('Por favor, preencha todos os campos antes de enviar o formulário!');\n            return;\n        }\n        newCandidato.competencias = linguagensSelecionadas;\n        console.log(newCandidato);\n        saveCandidato(newCandidato);\n    });\n    //Função\n    function saveCandidato(empresa) {\n        let candidatos = [];\n        const candidatosString = localStorage.getItem(\"candidatos\");\n        if (candidatosString) {\n            try {\n                candidatos = JSON.parse(candidatosString);\n            }\n            catch (error) {\n                console.error(`Não foi possível analisar o JSON armazenado em 'candidatos': ${error}`);\n            }\n        }\n        candidatos.push(empresa);\n        localStorage.setItem(\"candidatos\", JSON.stringify(candidatos));\n    }\n});\n\n\n//# sourceURL=webpack://frontend/./src/candidato/cadastroCandidato.ts?");

/***/ }),

/***/ "./src/candidato/candidato.ts":
/*!************************************!*\
  !*** ./src/candidato/candidato.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst usuario_1 = __importDefault(__webpack_require__(/*! ../usuario */ \"./src/usuario.ts\"));\nclass Candidato extends usuario_1.default {\n    getCpf() {\n        var _a;\n        const cpfString = (_a = this.cpfCandidato) === null || _a === void 0 ? void 0 : _a.toString();\n        const cpfFormatted = (cpfString === null || cpfString === void 0 ? void 0 : cpfString.substring(0, 3)) + '.' +\n            (cpfString === null || cpfString === void 0 ? void 0 : cpfString.substring(3, 6)) + '.' +\n            (cpfString === null || cpfString === void 0 ? void 0 : cpfString.substring(6, 9)) + '-' +\n            (cpfString === null || cpfString === void 0 ? void 0 : cpfString.substring(9, 11));\n        return cpfFormatted;\n    }\n}\nexports[\"default\"] = Candidato;\n\n\n//# sourceURL=webpack://frontend/./src/candidato/candidato.ts?");

/***/ }),

/***/ "./src/usuario.ts":
/*!************************!*\
  !*** ./src/usuario.ts ***!
  \************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Usuarios {\n}\nexports[\"default\"] = Usuarios;\n\n\n//# sourceURL=webpack://frontend/./src/usuario.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/candidato/cadastroCandidato.ts");
/******/ 	
/******/ })()
;